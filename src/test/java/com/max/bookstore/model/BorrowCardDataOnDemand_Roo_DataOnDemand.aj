// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.max.bookstore.model;

import com.max.bookstore.model.Book;
import com.max.bookstore.model.BookDataOnDemand;
import com.max.bookstore.model.BorrowCard;
import com.max.bookstore.model.People;
import com.max.bookstore.model.PeopleDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BorrowCardDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BorrowCardDataOnDemand: @Component;
    
    private Random BorrowCardDataOnDemand.rnd = new SecureRandom();
    
    private List<BorrowCard> BorrowCardDataOnDemand.data;
    
    @Autowired
    private BookDataOnDemand BorrowCardDataOnDemand.bookDataOnDemand;
    
    @Autowired
    private PeopleDataOnDemand BorrowCardDataOnDemand.peopleDataOnDemand;
    
    public BorrowCard BorrowCardDataOnDemand.getNewTransientBorrowCard(int index) {
        BorrowCard obj = new BorrowCard();
        setBook(obj, index);
        setBorrower(obj, index);
        setOwner(obj, index);
        return obj;
    }
    
    public void BorrowCardDataOnDemand.setBook(BorrowCard obj, int index) {
        Book book = bookDataOnDemand.getRandomBook();
        obj.setBook(book);
    }
    
    public void BorrowCardDataOnDemand.setBorrower(BorrowCard obj, int index) {
        People borrower = peopleDataOnDemand.getRandomPeople();
        obj.setBorrower(borrower);
    }
    
    public void BorrowCardDataOnDemand.setOwner(BorrowCard obj, int index) {
        People owner = peopleDataOnDemand.getRandomPeople();
        obj.setOwner(owner);
    }
    
    public BorrowCard BorrowCardDataOnDemand.getSpecificBorrowCard(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        BorrowCard obj = data.get(index);
        return BorrowCard.findBorrowCard(obj.getId());
    }
    
    public BorrowCard BorrowCardDataOnDemand.getRandomBorrowCard() {
        init();
        BorrowCard obj = data.get(rnd.nextInt(data.size()));
        return BorrowCard.findBorrowCard(obj.getId());
    }
    
    public boolean BorrowCardDataOnDemand.modifyBorrowCard(BorrowCard obj) {
        return false;
    }
    
    public void BorrowCardDataOnDemand.init() {
        data = BorrowCard.findBorrowCardEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'BorrowCard' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.max.bookstore.model.BorrowCard>();
        for (int i = 0; i < 10; i++) {
            BorrowCard obj = getNewTransientBorrowCard(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
