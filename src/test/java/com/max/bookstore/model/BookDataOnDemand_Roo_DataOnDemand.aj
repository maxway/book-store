// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.max.bookstore.model;

import com.max.bookstore.model.Book;
import com.max.bookstore.model.BookCategory;
import com.max.bookstore.model.People;
import com.max.bookstore.model.PeopleDataOnDemand;
import com.max.bookstore.model.Status;
import com.max.bookstore.model.StatusDataOnDemand;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BookDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BookDataOnDemand: @Component;
    
    private Random BookDataOnDemand.rnd = new SecureRandom();
    
    private List<Book> BookDataOnDemand.data;
    
    @Autowired
    private PeopleDataOnDemand BookDataOnDemand.peopleDataOnDemand;
    
    @Autowired
    private StatusDataOnDemand BookDataOnDemand.statusDataOnDemand;
    
    public Book BookDataOnDemand.getNewTransientBook(int index) {
        Book obj = new Book();
        setCategory(obj, index);
        setISBN(obj, index);
        setName(obj, index);
        setOwner(obj, index);
        setStatus(obj, index);
        setUuid(obj, index);
        return obj;
    }
    
    public void BookDataOnDemand.setCategory(Book obj, int index) {
        BookCategory category = null;
        obj.setCategory(category);
    }
    
    public void BookDataOnDemand.setISBN(Book obj, int index) {
        Long ISBN = new Integer(index).longValue();
        obj.setISBN(ISBN);
    }
    
    public void BookDataOnDemand.setName(Book obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void BookDataOnDemand.setOwner(Book obj, int index) {
        People owner = peopleDataOnDemand.getRandomPeople();
        obj.setOwner(owner);
    }
    
    public void BookDataOnDemand.setStatus(Book obj, int index) {
        Status status = statusDataOnDemand.getRandomStatus();
        obj.setStatus(status);
    }
    
    public void BookDataOnDemand.setUuid(Book obj, int index) {
        int uuid = index;
        obj.setUuid(uuid);
    }
    
    public Book BookDataOnDemand.getSpecificBook(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Book obj = data.get(index);
        return Book.findBook(obj.getId());
    }
    
    public Book BookDataOnDemand.getRandomBook() {
        init();
        Book obj = data.get(rnd.nextInt(data.size()));
        return Book.findBook(obj.getId());
    }
    
    public boolean BookDataOnDemand.modifyBook(Book obj) {
        return false;
    }
    
    public void BookDataOnDemand.init() {
        data = Book.findBookEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Book' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.max.bookstore.model.Book>();
        for (int i = 0; i < 10; i++) {
            Book obj = getNewTransientBook(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
